# This is a basic workflow to help you get started with Actions

name: AzureDeploy

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main
          
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            enable-AzPSSession: true 
        
        - name: 'Repository Login'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.AZURE_ACR_REGISTRY }}
            username: ${{ secrets.AZURE_ACR_USERNAME }}
            password: ${{ secrets.AZURE_ACR_PASSWORD }}
          
        - name: Build and Push Image
          run: |
            cd app
            docker build . -t ${{ secrets.AZURE_ACR_REGISTRY }}/redirector:${{ github.sha }}
            docker push ${{ secrets.AZURE_ACR_REGISTRY }}/redirector:${{ github.sha }}

        - name: Deploy Azure Resources
          uses: azure/powershell@v1
          with: 
            inlineScript: |
              $params = @{
                customDomain = "${{ secrets.AZUREDEPLOY_CUSTOM_DOMAIN }}";
                nameprefix = "${{ secrets.AZUREDEPLOY_NAMEPREFIX }}";
                containerAcrUsername = "${{ secrets.AZURE_ACR_USERNAME }}";
                containerAcrPassword = "${{ secrets.AZURE_ACR_PASSWORD }}";
                containerAcr = "${{ secrets.AZURE_ACR_REGISTRY }}";
                containerRepo = "redirector";
                containerTag = "${{ github.sha }}";
              }

              $resourceGroup = "${{ secrets.AZUREDEPLOY_RESOURCEGROUP }}"
              $res = New-AzResourceGroupDeployment -ResourceGroupName $resourceGroup -TemplateFile "template/azureresources.json" -TemplateParameterObject $params
              $res.ProvisioningState

            azPSVersion: '3.1.0'

        - name: Enable Frontdoor Custom Domain
          uses: azure/powershell@v1
          with: 
            inlineScript: |
              $customDomainFriendlyName = ("${{ secrets.AZUREDEPLOY_CUSTOM_DOMAIN }}").Replace('.', '-')
              $frontdoorName = "${{ secrets.AZUREDEPLOY_NAMEPREFIX }}fd"
              $resourceGroup = "${{ secrets.AZUREDEPLOY_RESOURCEGROUP }}"
              $httpsState = Get-AzFrontDoorFrontendEndpoint -ResourceGroupName $resourceGroup -FrontDoorName $frontdoorName -Name $customDomainFriendlyName | Select-Object -ExpandProperty "CustomHttpsProvisioningState"

              If ($httpsState -eq "Disabled") 
              {
                  Write-Host "Enabling Managed Certificate for custom domain"
                  Enable-AzFrontDoorCustomDomainHttps -ResourceGroupName $resourceGroup -FrontDoorName $frontdoorName -FrontendEndpointName $customDomainFriendlyName -MinimumTlsVersion 1.2
                  Write-Host "Validation is running. Check status in the portal or through script"
              }  
              Else
              {
                  Write-Host "Https State for custom domain is $HttpsState"
                  If (-NOT $HttpsState -eq "Enabled")
                  {
                      Write-Host "Managed Certificate validation pending. Check status in the portal or through script"
                  }
              }
            azPSVersion: '3.1.0'